input {
  beats {
    port => 5044
  }
  #beats {
  #  port => 5045
  #  ssl => true
  #  ssl_certificate => "/etc/pki/tls/certs/vmx-udm5g-006.ete.ka.sw.ericsson.se.pem"
  #  ssl_key => "/etc/pki/tls/private/vmx-udm5g-006.ete.ka.sw.ericsson.se.p8"
  #  ssl_certificate_authorities => ["/etc/pki/tls/certs/symantec-ca-intermediate-logstash.pem"]
  #}
}

filter {
  if [service][type] == "system" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }

  if [service][type] == "haproxy" {
    grok {
      match => {
        "message" => [
        "%{HAPROXY_DATE:[haproxy][request_date]} %{IPORHOST:[haproxy][source]} %{PROG:[haproxy][process_name]}(?:\[%{POSINT:[haproxy][pid]}\])?: %{GREEDYDATA} %{IPORHOST:[haproxy][client][ip]}:%{POSINT:[haproxy][client][port]} %{WORD} %{IPORHOST:[haproxy][destination][ip]}:%{POSINT:[haproxy][destination][port]} \(%{WORD:[haproxy][frontend_name]}/%{WORD:[haproxy][mode]}\)",
        "(%{NOTSPACE:[haproxy][process_name]}\[%{NUMBER:[haproxy][pid:int}\]: )?%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port:int} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][http][request][time_wait_ms:int}/%{NUMBER:[haproxy][total_waiting_time_ms:int}/%{NUMBER:[haproxy][connection_wait_time_ms:int}/%{NUMBER:[haproxy][http][request][time_wait_without_data_ms:int}/%{NUMBER:[haproxy][http][request][time_active_ms:int} %{NUMBER:[haproxy][http][response][status_code:int} %{NUMBER:[haproxy][bytes_read:int} %{NOTSPACE:[haproxy][http][request][captured_cookie]} %{NOTSPACE:[haproxy][http][response][captured_cookie]} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active:int}/%{NUMBER:[haproxy][connections][frontend:int}/%{NUMBER:[haproxy][connections][backend:int}/%{NUMBER:[haproxy][connections][server:int}/%{NUMBER:[haproxy][connections][retries:int} %{NUMBER:[haproxy][server_queue:int}/%{NUMBER:[haproxy][backend_queue:int} (\{%{DATA:[haproxy][http][request][captured_headers]}\} \{%{DATA:[haproxy][http][response][captured_headers]}\} |\{%{DATA}\} )?\"%{GREEDYDATA:[haproxy][http][request][raw_request_line]}\"",
        "(%{NOTSPACE:[haproxy][process_name]}\[%{NUMBER:[haproxy][pid:int}\]: )?%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port:int} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]}/%{NOTSPACE:[haproxy][bind_name]} %{GREEDYDATA:[haproxy][error_message]}",
        "%{HAPROXY_DATE} %{IPORHOST:[haproxy][source]} (%{NOTSPACE:[haproxy][process_name]}\[%{NUMBER:[haproxy][pid:int}\]: )?%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port:int} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][total_waiting_time_ms:int}/%{NUMBER:[haproxy][connection_wait_time_ms:int}/%{NUMBER:[haproxy][tcp][processing_time_ms:int} %{NUMBER:[haproxy][bytes_read:int} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active:int}/%{NUMBER:[haproxy][connections][frontend:int}/%{NUMBER:[haproxy][connections][backend:int}/%{NUMBER:[haproxy][connections][server:int}/%{NUMBER:[haproxy][connections][retries:int} %{NUMBER:[haproxy][server_queue:int}/%{NUMBER:[haproxy][backend_queue:int}"
        ]
      }
      pattern_definitions => {
        "HAPROXY_DATE" => "(%{MONTHDAY}[/-]%{MONTH}[/-]%{YEAR}:%{HOUR}:%{MINUTE}:%{SECOND})|%{SYSLOGTIMESTAMP}"
        }
    }
    date {
      match => [
        "[haproxy][request_date]",
        "dd/MMM/yyyy:HH:mm:ss.SSS",
        "dd/MMM/yyyy:HH:mm:ss",
        "MMM dd HH:mm:ss"
      ]
      target => "@timestamp"
    }
    geoip {
      source => "[haproxy][client][ip]"
      target => "[haproxy][geoip]"
    }
  }

  if [fields][jenkins_log_type] == "build-xml" {
    grok {
      match => { "[log][file][path]" => "^/var/lib/jenkins/jobs/%{DATA:jenkins_pdg_name}_%{DATA:jenkins_microservice_name}_%{DATA:jenkins_test_type}/builds/%{DATA:jenkins_build_id}/build.xml$" }
    }
  }

  if [fields][jenkins_log_type] == "build-log" {
    grok {
      match => { "[log][file][path]" => "^/var/lib/jenkins/jobs/%{DATA:jenkins_pdg_name}_%{DATA:jenkins_microservice_name}_%{DATA:jenkins_test_type}/builds/%{DATA:jenkins_build_id}/log$" }
    }
  }

  if [kubernetes][namespace] {
    grok {
      match => { "[kubernetes][namespace]" => "^%{DATA:jenkins_pdg_name}-%{DATA:jenkins_microservice_name}(-%{DATA:jenkins_test_type}|-%{DATA:jenkins_test_type}$|-%{DATA:jenkins_test_type}-%{INT}|)(-%{INT:jenkins_build_id}|)(-[a-zA-Z0-9]*|)$" }
    }
  }

  if [jenkins_test_type] {
    mutate {
      gsub => [ "jenkins_test_type", "-", "_" ]
    }
  }

  if [jenkins_pdg_name] {
    mutate {
      lowercase => [ "jenkins_pdg_name" ]
    }
  }

  if [jenkins_microservice_name] {
    mutate {
      lowercase => [ "jenkins_microservice_name" ]
    }
  }

  if [jenkins_test_type] {
    mutate {
      lowercase => [ "jenkins_test_type" ]
    }
  }

}

output {
  elasticsearch {
    hosts => ["http://10.210.117.240:9200","http://10.210.117.241:9200", "http://10.210.117.242:9200", "http://10.210.117.244:9200", "http://10.210.117.245:9200"]
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM}-%{[host][name]}"
    #pipeline => "%{[@metadata][pipeline]}"
    #user => "user"
    #password => "password"
  }
}

#output {
#  stdout { codec => rubydebug }
#}
